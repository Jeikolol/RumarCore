// <auto-generated />
using System;
using DatabaseMigrations.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Beneficiaries", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BeneficiaryLoan", b =>
                {
                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BeneficiaryId", "LoanId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LoanId");

                    b.ToTable("BeneficiaryLoans", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ClientTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7216),
                            Description = "CLIENTE RECURRENTE",
                            IsDeleted = false,
                            Name = "RECURRENTE"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7217),
                            Description = "CLIENTE RECOMENDADO",
                            IsDeleted = false,
                            Name = "RECOMENDADO"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7218),
                            Description = "CLIENTE NUEVO",
                            IsDeleted = false,
                            Name = "NUEVO"
                        });
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "RD",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7177),
                            Description = "REPUBLICA DOMINICANA",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Code = "USA",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7178),
                            Description = "ESTADOS UNIDOS",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Code = "ESP",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7179),
                            Description = "ESPAÑA",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            Code = "UK",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7180),
                            Description = "REINO UNIDO",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Core.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Capital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CapitalToShow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quote")
                        .HasColumnType("int");

                    b.Property<int>("RemainingPayments")
                        .HasColumnType("int");

                    b.Property<int>("TaxTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("TransactionPaymentId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("RelationshipTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7156),
                            Description = "RELACION FAMILIAR",
                            IsDeleted = false,
                            Name = "FAMILIAR"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7159),
                            Description = "RELACIONADA",
                            IsDeleted = false,
                            Name = "RELACIONADO"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7160),
                            Description = "RELACION COMERCIAL",
                            IsDeleted = false,
                            Name = "COMERCIAL"
                        });
                });

            modelBuilder.Entity("Core.Entities.TaxType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("TaxTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "01",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7195),
                            IsDeleted = false,
                            Name = "0%",
                            Percentage = 0.0m
                        },
                        new
                        {
                            Id = 2,
                            Code = "02",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7196),
                            IsDeleted = false,
                            Name = "18%",
                            Percentage = 0.18m
                        },
                        new
                        {
                            Id = 3,
                            Code = "03",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7197),
                            IsDeleted = false,
                            Name = "25%",
                            Percentage = 0.25m
                        },
                        new
                        {
                            Id = 4,
                            Code = "04",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7198),
                            IsDeleted = false,
                            Name = "50%",
                            Percentage = 0.50m
                        });
                });

            modelBuilder.Entity("Core.Entities.TransactionPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("TransactionPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7249),
                            Description = "PAGO DIARIO",
                            IsDeleted = false,
                            Name = "DIARIO"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7250),
                            Description = "PAGO QUINCENAL",
                            IsDeleted = false,
                            Name = "QUINCENAL"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7251),
                            Description = "PAGO MENSUAL",
                            IsDeleted = false,
                            Name = "MENSUAL"
                        });
                });

            modelBuilder.Entity("Core.Entities.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("TransactionTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7232),
                            Description = "PAGO EN EFECTIVO",
                            IsDeleted = false,
                            Name = "EFECTIVO"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7233),
                            Description = "PAGO EN TRANSFERENCIA",
                            IsDeleted = false,
                            Name = "TRANSFERENCIA"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7234),
                            Description = "PAGO EN CHEQUE",
                            IsDeleted = false,
                            Name = "CHEQUE"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "",
                            CreatedById = 1,
                            CreatedOn = new DateTime(2022, 9, 1, 23, 18, 28, 472, DateTimeKind.Utc).AddTicks(7028),
                            Email = "admin@admin.com",
                            FirstName = "Administrador",
                            Identification = "40228341968",
                            IsDeleted = false,
                            LastName = "",
                            Password = "1000:o/aziZjsVx7sr4RzrtPHNs2AkP5LGuhH:txBYU1u3kkEktiP64gKan99vXohED85c",
                            PhoneNumber = "8298879669",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Core.Entities.Beneficiary", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.BeneficiaryLoan", b =>
                {
                    b.HasOne("Core.Entities.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryLoan")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Loan", "Loan")
                        .WithMany("BeneficiaryLoan")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("CreatedBy");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.ClientType", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.Loan", b =>
                {
                    b.HasOne("Core.Entities.Client", "Client")
                        .WithOne("Loan")
                        .HasForeignKey("Core.Entities.Loan", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ClientType", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TransactionPayment", "TransactionPayment")
                        .WithMany()
                        .HasForeignKey("TransactionPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientType");

                    b.Navigation("CreatedBy");

                    b.Navigation("TaxType");

                    b.Navigation("TransactionPayment");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Core.Entities.RelationshipType", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.TaxType", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.TransactionPayment", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.TransactionType", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core.Entities.Beneficiary", b =>
                {
                    b.Navigation("BeneficiaryLoan");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Core.Entities.Loan", b =>
                {
                    b.Navigation("BeneficiaryLoan");
                });
#pragma warning restore 612, 618
        }
    }
}
